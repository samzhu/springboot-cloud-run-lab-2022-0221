/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.example.demo.book.interfaces.rest;


import com.example.demo.book.interfaces.rest.dto.BookCreateDTO;
import com.example.demo.book.interfaces.rest.dto.BookViewDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2022-04-08T14:59:30.957743+08:00[Asia/Taipei]")
@Validated
@Tag(name = "Book", description = "the Book API")
public interface BookApi {

  /**
   * POST /v1/books : Create Book 建立書籍資料
   *
   * @param bookCreateDTO 要新增的書籍資料 (optional)
   * @return Created (status code 201)
   */
  @Operation(
      operationId = "createBook",
      summary = "Create Book",
      tags = {"Book"},
      responses = {
        @ApiResponse(
            responseCode = "201",
            description = "Created",
            content =
                @Content(
                    mediaType = "application/json",
                    schema = @Schema(implementation = BookViewDTO.class)))
      })
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/v1/books",
      produces = "application/json",
      consumes = "application/json")
  ResponseEntity<BookViewDTO> createBook(
      @Parameter(
              name = "BookCreateDTO",
              description = "要新增的書籍資料",
              schema = @Schema(description = ""))
          @Valid
          @RequestBody(required = false)
          BookCreateDTO bookCreateDTO);

  /**
   * GET /v1/books/{bookId} : Your GET endpoint 取得單一書籍
   *
   * @param bookId 書籍ID (required)
   * @return OK (status code 200)
   */
  @Operation(
      operationId = "getBookByBookId",
      summary = "Your GET endpoint",
      tags = {"Book"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "OK",
            content =
                @Content(
                    mediaType = "application/json",
                    schema = @Schema(implementation = BookViewDTO.class)))
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/v1/books/{bookId}",
      produces = "application/json")
  ResponseEntity<BookViewDTO> getBookByBookId(
      @Parameter(
              name = "bookId",
              description = "書籍ID",
              required = true,
              schema = @Schema(description = ""))
          @PathVariable("bookId")
          Integer bookId);

  /**
   * GET /v1/books : Get Books 取得所有書籍
   *
   * @return OK (status code 200)
   */
  @Operation(
      operationId = "getBooks",
      summary = "Get Books",
      tags = {"Book"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "OK",
            content =
                @Content(
                    mediaType = "application/json",
                    schema = @Schema(implementation = BookViewDTO.class)))
      })
  @RequestMapping(method = RequestMethod.GET, value = "/v1/books", produces = "application/json")
  ResponseEntity<List<BookViewDTO>> getBooks();
}
