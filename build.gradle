plugins {
	id 'org.springframework.boot' version '2.6.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'maven-publish'
	id 'jacoco'
	// git info
	id 'com.gorylenko.gradle-git-properties' version '2.4.0'
	// coding style
	// https://github.com/diffplug/spotless/blob/main/plugin-gradle/README.md
	// ./gradlew spotlessApply
	id 'com.diffplug.spotless' version '6.3.0'
	// openapi generator
	// https://plugins.gradle.org/plugin/org.openapi.generator
	// ./gradlew openApiValidate & ./gradlew openApiGenerate
	id 'org.openapi.generator' version '5.4.0'
	// Swagger convert to pdf
	id 'io.github.lhotari.swagger2markup' version '1.3.3.1'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'org.asciidoctor.jvm.pdf' version '3.3.2'
}

group = 'com.example.demo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudGcpVersion', "3.1.0")
	set('springCloudVersion', "2021.0.1")
	set('testcontainersVersion', "1.16.2")
	set('commonslang3Version', "3.12.0")
	set('mapstructVersion', "1.4.2.Final")
	set('springfoxVersion', "3.0.0")
	// OpenAPI
	set('openapiInputSpec', "${rootDir}/dev-resources/reference/openapi.yaml")
	set('openapiOutputDir', "${rootDir}")
	set('openapiInvokerPackage', "${group}")
	set('openapiApiPackage', "${openapiInvokerPackage}.${rootProject.name}.interfaces.rest")
	set('openapiModelPackage', "${openapiInvokerPackage}.${rootProject.name}.interfaces.rest.dto")
	set('openapiConfigPackage', "${openapiInvokerPackage}.configuration")
	set('apiDocPath', "${buildDir}/swagger/api.json")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.google.cloud:spring-cloud-gcp-starter'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	// Add
	implementation 'com.google.cloud:spring-cloud-gcp-starter-sql-postgresql'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-trace'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-secretmanager'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-metrics'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-logging'
	// Tool
	implementation "org.apache.commons:commons-lang3:${commonslang3Version}"
	// mapstruct
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	// Swagger (TODO: Change to Springdoc-openapi)
	implementation "io.springfox:springfox-boot-starter:${springfoxVersion}"
	implementation "io.springfox:springfox-swagger-ui:${springfoxVersion}"
	implementation "io.springfox:springfox-data-rest:${springfoxVersion}"
	// UnitTest
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
		mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
	systemProperty 'apiDocPath', "${apiDocPath}"
	testLogging.showStandardStreams = true
}

gitProperties {
	failOnNoGitDirectory = false
}

spotless {
	encoding 'UTF-8' // all formats will be interpreted as UTF-8
	java {
		target 'src/**/*.java'
		toggleOffOn('@formatter:off','@formatter:on') // 原本 spotless:off, spotless:on
		googleJavaFormat()
		removeUnusedImports()
		importOrder()
		trimTrailingWhitespace()
		endWithNewline()
	}
	sql {
		target 'src/**/*.sql'
		dbeaver()
	}
	groovyGradle {
		target '*.gradle'
		greclipse()
	}
	format 'xml', {
		target 'src/**/*.xml'
		eclipseWtp('xml')
	}
}

jacocoTestReport {
	// tests are required to run before generating the report
	dependsOn test
	reports {
		// sonar analysis equired
		xml.required.set(true)
		csv.required.set(true)
		html.required.set(true)
	}

}

openApiGenerate {
	generatorName = "spring"
	library = "spring-boot"
	inputSpec = "${openapiInputSpec}"
	outputDir = "${openapiOutputDir}"
	// templateDir = "${openapiTemplateDir}"
	invokerPackage = "${openapiInvokerPackage}"
	apiPackage = "${openapiApiPackage}"
	modelPackage = "${openapiModelPackage}"
	typeMappings = [
		set: 'List'
	]
	instantiationTypes = [
		set: 'ArrayList'
	]
	importMappings = [
		LinkedHashSet: 'java.util.ArrayList'
	]
	configOptions = [
		configPackage: "${openapiConfigPackage}",
		dateLibrary: "java8",
		openApiNullable: "false",
		disallowAdditionalPropertiesIfNotPresent: "false",
		groupId: "${group}",
		hateoas: "false",
		interfaceOnly: "true",
		licenseName: "Unlicense",
		singleContentTypes: "true", // Whether to select only one produces/consumes content-type by operation.
		title: "${rootProject.name}",
		unhandledException: "true", // Declare operation methods to throw a generic exception and allow unhandled exceptions
		useTags: "true", // use tags for creating interface and controller classnames
		useOptional: "true",
		skipOverwrite: "true",
		skipDefaultInterface: "true"
		// responseWrapper: "CompletableFuture"
	]
}

tasks.openApiGenerate {
	doLast {
		delete (
				"${openapiOutputDir}/.openapi-generator"
				)
	}
}

// ./gradlew convertSwagger2markup
// 產生到 asciidoc 下 definitions.adoc overview.adoc paths.adoc security.adoc
convertSwagger2markup {
	swaggerInput file("${apiDocPath}").getAbsolutePath()
	outputFile file("${buildDir}/swagger/api")
	// outputDir file("index")
	config = [
		'swagger2markup.markupLanguage'          : 'ASCIIDOC',
		'swagger2markup.pathsGroupedBy'          : 'TAGS',
		'swagger2markup.outputLanguage'          : 'EN',
		'swagger2markup.generatedExamplesEnabled': true,
		'swagger2markup.inlineSchemaEnabled'     : false
	]
}

// ./gradlew asciidoctor
asciidoctor {
	sourceDir file("${buildDir}/swagger")
	sources {
		include 'api.adoc'
	}
	attributes 'doctype': 'book',
	'icons': 'font',
	'source-highlighter': 'highlightjs',
	'toc': 'left',
	'toclevels': 2,
	'sectlinks': true
	outputOptions {
		backends = ['html5', 'pdf']
	}
	outputDir file('publish')
}